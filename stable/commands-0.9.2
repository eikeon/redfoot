<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:redfoot="http://redfoot.net/2005/redfoot#"
   xmlns:program="http://redfoot.net/2005/program#"
   xmlns:handler="http://redfoot.net/2005/01/handler#"
>

  <redfoot:Configuration rdf:ID="config">
    <rdfs:label>commands config</rdfs:label>
    <rdfs:comment>A configuration with all the commands</rdfs:comment>
    <program:command rdf:resource="#server"/>
    <program:command rdf:resource="#set_base"/>
    <program:command rdf:resource="#load"/>
    <program:command rdf:resource="#save"/>
    <program:command rdf:resource="#print"/>
    <program:command rdf:resource="#contexts"/>
    <program:command rdf:resource="#remove_context"/>
    <program:command rdf:resource="#reload_all"/>
    <program:command rdf:resource="#save_all"/>
    <program:command rdf:resource="#auto_reload"/>
    <program:command rdf:resource="#import"/>
    <program:command rdf:resource="#twistd"/>    
  </redfoot:Configuration>>

  <program:Command rdf:ID="set_base">
    <rdfs:label>set_base</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="set_base_code">
        <redfoot:codestr>
<![CDATA[

assert len(args)==1, "expecting one argument that is the base"
redfoot.base = URIRef(args[0])

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>      
  </program:Command>

  <program:Command rdf:ID="load">
    <rdfs:label>load</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="load_code">
      <redfoot:codestr>
<![CDATA[

if len(args)==0 or len(args)>2:
    print "usage: ./redfoot.py load <uri> [<publicID>]"
else:
    url = args[0]
    if len(args)==2:
        publicID = args[1]
    else:
        publicID = None

    print "loading: %s" % url
    if publicID:
        print " with publicID: %s" % publicID
    store.load(url, publicID=publicID)

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>      
  </program:Command>

  <program:Command rdf:ID="save">
    <rdfs:label>save</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="save_code">
      <redfoot:codestr>
<![CDATA[

REDFOOT = redfoot.namespace("http://redfoot.net/2005/redfoot#")

for arg in args:
    print "saveing: %s" % arg
    source = URIRef(store.absolutize(arg))
    print "source:", source
    for cid, _, source in store.triples((None, REDFOOT.source, source)):
        context = store.get_context(cid)
        context.save(source, format="pretty-xml")
        print "saved:", source, len(context)

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>      
  </program:Command>

  <program:Command rdf:ID="print">
    <rdfs:label>print</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="print_code">
      <redfoot:codestr>
<![CDATA[

import sys
for arg in args:
    cid = redfoot.absolutize(arg, defrag=0)
    print cid
    context = redfoot.get_context(cid)
    context.serialize(format="pretty-xml", destination=sys.stdout)

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>      
  </program:Command>

  <program:Command rdf:ID="contexts">
    <rdfs:label>contexts</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="contexts_code">
      <redfoot:codestr>
<![CDATA[

REDFOOT = redfoot.namespace("http://redfoot.net/2005/redfoot#")

for cid in store.contexts():
    try:
        source = store.value(cid, REDFOOT.source)
        print cid, source, len(store.get_context(cid))
    except Exception, e:
        print cid, e

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>
  </program:Command>

  <program:Command rdf:ID="remove_context">
    <rdfs:label>remove_context</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="remove_contexts_code">
      <redfoot:codestr>
<![CDATA[

REDFOOT = redfoot.namespace("http://redfoot.net/2005/redfoot#")

for arg in args:
    uri = URIRef(redfoot.absolutize(arg, defrag=0))
    redfoot.remove_context(uri) 
    for cid in store.subjects(REDFOOT.source, uri):
        print "removing:", cid, uri
        redfoot.remove_context(cid)
    redfoot.remove_context(BNode(arg))

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>
  </program:Command>


  <program:Command rdf:ID="reload_all">
    <rdfs:label>reload_all</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="reload_all_code">
      <redfoot:codestr>
<![CDATA[

REDFOOT = redfoot.namespace("http://redfoot.net/2005/redfoot#")

for cid, _, source in store.triples((None, RDF.type, REDFOOT.Context)):
    source = redfoot.value(cid, REDFOOT.source, default=None)
    if source:
        print "loading %s" % source
        try:
            store.load(source, publicID=cid)
        except Exception, e:
            print e

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>
  </program:Command>

  <program:Command rdf:ID="save_all">
    <rdfs:label>save_all</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="save_all_code">
      <redfoot:codestr>
<![CDATA[

REDFOOT = redfoot.namespace("http://redfoot.net/2005/redfoot#")

for cid, _, source in store.triples((None, REDFOOT.source, None)):
    if source:
        print "saving %s" % source
        try:
            context = store.get_context(cid)
            context.save(source, format="pretty-xml")            
        except Exception, e:
            print e

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>
  </program:Command>

  <program:Command rdf:ID="server">
    <rdfs:label>server</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="server_code">
      <redfoot:codestr>
<![CDATA[

SERVER = redfoot.namespace("http://redfoot.net/2005/01/server#")

port = 80
if len(args)>0:
    try:
        port = int(args[0])
    except:
	print "invalid port of '%s'" % port
    
server = redfoot.value(redfoot.program, SERVER.server) 
assert server, "%s does not have a %s" % (redfoot.program, SERVER.server)

handler = redfoot.value(redfoot.program, SERVER.handler) 
assert handler, "%s does not have a %s" % (redfoot.program, SERVER.handler)

RedfootServer = redfoot.module(server).RedfootServer
server = RedfootServer(handler, port=port)
server.run()

]]>
      </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>
  </program:Command>

  <program:Command rdf:ID="auto_reload">
    <rdfs:label>auto_reload</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="auto_reload_code">
       <redfoot:codestr>
<![CDATA[
    
REDFOOT = redfoot.namespace("http://redfoot.net/2005/redfoot#")
DC = redfoot.namespace("http://purl.org/dc/elements/1.1/")

from time import sleep
from urlparse import urlparse
from os.path import getmtime, isfile

while 1:
    sleep(1)
    for cid, _, source in store.triples((None, REDFOOT.source, None)):
        if source:
            scheme, netloc, path, params, query, fragment = urlparse(source)
            if isfile(path):
                ts = getmtime(path)                
		LONG_AGO = 0
                current_ts = int(redfoot.value(cid, DC.date, any=True, default=LONG_AGO))
                if not current_ts or current_ts<ts:
                    redfoot.remove((cid, DC.date, None))
                    redfoot.index.add((cid, DC.date, Literal(ts)))
                    print "loading: %s" % path, ts
                    redfoot.load(source, publicID=cid)

]]>
       </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>
  </program:Command>

  <program:Command rdf:ID="import">
    <rdfs:label>import</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="import_code">
       <redfoot:codestr>
<![CDATA[
    
from urllib import quote
from rdflib import Graph

uri = args[0]

g = Graph()
g.load(uri)

for context in g.subjects(RDF.type, REDFOOT.Context):
    print context
    source = "%s?uri=%s" % (uri, quote(context))
    print source
    redfoot.load(source, publicID=context)

]]>
       </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>
  </program:Command>

  <program:Command rdf:ID="twistd">
    <rdfs:label>twistd</rdfs:label>
    <redfoot:code>
     <redfoot:Program rdf:ID="twistd_code">
       <redfoot:codestr>
<![CDATA[
    
port = 80
if len(args)>0:
    try:
        port = int(args[0])
    except:
	print "invalid port of '%s'" % port

###
# TODO: can duplication with server command be avoided here
SERVER = redfoot.namespace("http://redfoot.net/2005/01/server#")

server_uri = redfoot.value(redfoot.program, SERVER.server) 
assert server_uri, "%s does not have a %s" % (redfoot.program, SERVER.server)

server = redfoot.module(server_uri)
handler = redfoot.value(redfoot.program, SERVER.handler) 
#
###


from twisted.application import service, internet
from twisted.internet import reactor

def onShutdown():
    print "redfoot: closing" 
    redfoot.close()
    

reactor.addSystemEventTrigger('after', 'shutdown', onShutdown)
application = service.Application("redfoot")
site = server.Site(server._Resource(handler))

internet.TCPServer(port, site).setServiceParent(application)

def close():
    print "NOOP"
# TODO: how better to do this?
redfoot.close = close

redfoot.application = application

]]>
       </redfoot:codestr>
     </redfoot:Program>
    </redfoot:code>
  </program:Command>

</rdf:RDF>  
