<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:rdfe="http://redfoot.net/rdf#"
   xmlns:redfoot="http://redfoot.net/2005/redfoot#"
   xmlns:server="http://redfoot.net/2005/server#"
>

  <rdfe:RDFXMLDocument rdf:about="">
    <rdfs:label>Redfoot Kernel RDF/XML</rdfs:label>
  </rdfe:RDFXMLDocument>

  <server:Handler rdf:about="#">
    <rdfs:label>Default handler</rdfs:label>      
    <server:display_support rdf:resource="#display_support"/>
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python"><![CDATA[

SERVER = redfoot.namespace("http://redfoot.net/2005/server#")

# Support tunneling requests for any resource through a server
if request.path.startswith("/;"):
    request.uri = URIRef(request.uri.split(";", 1)[-1]) 

# This was needed to fix a bug that happens fronting redfoot with apache via mod_proxy
if not "://" in request.uri:
    request.uri = URIRef(request.uri.replace(":/", "://"))

method = request.method.lower()
if method=="get" or method=="head":
    from twisted.web.http import datetimeToString, stringToDatetime, NOT_MODIFIED

    if request.user_id: 
        # TODO: ETag support -- so we can support conditional GETs for
        # pages when user is logged in.
        valid = False

        # set to date in past so that we don't return a 304 for the
        # page when the user logs out.
        response.setHeader("Last-Modified", datetimeToString(0)) 
    else:
        modified_since = request.getHeader('if-modified-since')
        if modified_since:
            try:
                modified_since = stringToDatetime(modified_since)
            except:
                modified_since = None

        last_modified = redfoot.value(request.uri, SERVER.last_modified)
        if last_modified:
            try:
                last_modified = int(float(last_modified))
            except:
                last_modified = None

        if last_modified:
            response.setHeader("Last-Modified", datetimeToString(last_modified))

        valid = modified_since and last_modified and last_modified <= modified_since

    if valid:
        response.setStatus(NOT_MODIFIED, "Not Modified")
        response.finish()
    else:
        handler = URIRef("#get_handler", base=redfoot_current)
        redfoot.execute(handler, context=globals())
elif method=="put":
    handler = URIRef("#put_handler", base=redfoot_current)
    redfoot.execute(handler, request=request, response=response)
elif method=="post":
    handler = URIRef("#get_handler", base=redfoot_current)
    redfoot.execute(handler, request=request, response=response)
else:
    response.setStatus(405, "Method Not Allowed")
    response.setHeader("ACCEPT", "HEAD")
    response.finish()
 ]]>
    </rdf:value>
  </server:Handler>

  <server:Handler rdf:about="#get_handler">
    <rdfs:label>Default GET handler</rdfs:label>      
    <server:page_handler rdf:resource="../templates/classic#page"/>
    <server:page_handler rdf:resource="#RDFXMLDocumentPageHandler"/>
    <server:supported_content_types>application/xhtml+xml, application/rdf+xml</server:supported_content_types>
    <server:display_support rdf:resource="#display_support"/>
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

import logging

_logger = logging.getLogger(redfoot_current)

from twisted.internet.threads import deferToThread
from twisted.web.http import datetimeToString
from time import time

SERVER = redfoot.namespace("http://redfoot.net/2005/server#")

site = URIRef("/data#Site", base=request.host)
request.site = site

if (site, None, None) not in redfoot:
    data = redfoot.get_context(redfoot.context_id(site, context_id="context"))
    data.add((site, RDF.type, SERVER.Site))
    data.add((site, SERVER.allow, URIRef("%s/data#Admin" % request.host)))
    install = URIRef("http://redfoot.net/hypercode/aspect#install")
    redfoot.check(URIRef("aspects/list", base=redfoot_program)) # since we're doing other init bits
    auth = URIRef("aspects/auth#aspect", base=redfoot_program)
    redfoot.execute(install, aspect=auth , base=request.host)

def lookup(property, default=None):
    return request.lookup(property) or redfoot.value(redfoot_current, property) or default

referer = request.headers.get("referer")
if referer:
    from rdflib.Namespace import Namespace
    REFERER = Namespace("http://redfoot.net/2005/referer#")
    referer = URIRef(referer)
    c = redfoot.get_context(URIRef("referers", base=request.host), creator=redfoot_current)
    if not (c, RDFS.label, None) in redfoot:
        c.add((c, RDFS.label, Literal("Referers")))
        c.add((c, RDFS.comment, Literal("A context used to keep track of HTTP Referers")))
    if not request.uri.startswith(request.host):
        if (request.uri, REFERER.referer, referer) not in redfoot:
            c.add((request.uri, REFERER.referer, referer))
            xmpp = redfoot.xmpp
            if xmpp:
                xmpp.send(REDFOOT.Admin, "Found new referer %s for page %s" % (referer, request.uri))

page_handler = None

content_type = request.parameters.get("content-type") 
if not content_type:
     # TODO: is this how we want to determine supported content types?
    supported_content_types = lookup(SERVER.supported_content_types)
    if supported_content_types:
        supported = list()
        for type in supported_content_types.split(","):
            supported.append(type.strip())
        accept = request.headers.get("accept")
        if not accept:
            accept = "*/*"
            _logger.debug("headers: %s" % request.headers)
        mimeparse = redfoot.module(URIRef("modules/mimeparse#module", base=redfoot_program))
        try:
            content_type = mimeparse.best_match(supported, accept)
        except Exception, e:
            _logger.exception("While trying to find best_match(%s, %s): %s" % (supported, accept, e))
            content_type = mimeparse.best_match(supported, "*/*")
        if content_type:
            content_type = Literal(content_type)
        _logger.debug("supported: %s accept: %s best_match: %s" % (supported, accept, content_type))
    else:
        content_type = None

for handler in request.objects(SERVER.page_handler):
    redfoot.check(handler)  
    if content_type:
        handler_content_type = redfoot.value(handler, SERVER.content_type)
        if handler_content_type is None:
            _logger.error("handler '%s' must have a content_type" % handler)
        if handler_content_type == content_type:
            page_handler = handler
            break
    else:
        page_handler = handler
        break
if page_handler is None:
    for handler in redfoot.objects(redfoot_current, SERVER.page_handler):
        redfoot.check(handler)
        if content_type:
            handler_content_type = redfoot.value(handler, SERVER.content_type)
            if handler_content_type is None:
                _logger.error("handler '%s' must have a content_type" % handler)
            if handler_content_type == content_type:
                page_handler = handler
                break
        else:
            page_handler = handler
            break

if page_handler is None:
    response.setStatus(404, "Not Found")            
    response.write("No page handler found")
    response.finish()
else:
    response.cache_body = True # So that server's request.finish will add content-length, Content-MD5 and ETag headers
    
    # TODO: if resource has last-modified then say so...
    #response.setHeader("last-modified", datetimeToString(now))
    
    # TODO: do at end of request processing?
    response.setHeader("Cache-Control", "s-maxage=0, must-revalidate")
    response.setHeader("Expires", datetimeToString(time()))
    #response.setHeader("Vary", "Accept-Encoding")
    
    redfoot.execute(lookup(SERVER.display_support), context=globals())
    
    long_running = redfoot.value(request.uri, SERVER.long_running) or redfoot.value(page_handler, SERVER.long_running)
    if str(long_running)=="true": # TODO:
        def finish(_):
            response.finish()
        d = deferToThread(display, page_handler, fragment=False)
        d.addCallbacks(callback=finish, errback=finish)
    else:
        display(page_handler, fragment=False)
        response.finish()

]]>
    </rdf:value>
  </server:Handler>


  <rdf:Description rdf:ID="display_support"> <!-- TODO: type-->
    <rdfs:label>display support</rdfs:label>      
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[
# TODO: this is a bit out of hand :(

SERVER = redfoot.namespace("http://redfoot.net/2005/server#")
TEMPLATE = redfoot.namespace("http://redfoot.net/2005/template#")

REQUIRED = "0.9.3"
def version_tuple(s):
    return tuple([int(x) for x in s[0:5].split(".")])    
try:
    import kid
except ImportError, e:
    raise ImportError("kid is not installed. Please install kid-%s ( http://kid-templating.org/ )" % REQUIRED)


assert version_tuple(kid.__version__) >= version_tuple(REQUIRED), "Please install kid version %s or higher. Found kid version: %s" % (REQUIRED, kid.__version__)

from kid import compiler as kid_compiler

from StringIO import StringIO
from itertools import chain

# redefine lookup
def lookup(property, default=None, uri=None):
    return request.lookup(property, uri=uri) or redfoot.value(page_handler, property) or default

auth = redfoot.module(URIRef("modules/auth#module", base=redfoot_program))
def allow(uri):
    return auth.allow(request, uri)

def display(uri, fragment=True, output=None, **args):
    if not uri:
        return
    request.sources.append(uri)
    assert(isinstance(uri, URIRef), "uri not URIRef as expected")
    context = globals()
    for k, v in args.items():
        context[k] = v
    redfoot.check(uri)
    global write_to_response
    if fragment==False:
        if not allow(request.uri):
            response.setStatus(403, "Forbidden")
        #if not allow(uri):
            #uri = lookup(SERVER.unauthorized_page_handler)
            #response.setStatus(403, "Forbidden")
        #    assert uri, "No 'unauthorized_page' found for: %s" % uri
	write_to_response = True
	content_type = redfoot.value(uri, SERVER.content_type) or 'text/html; charset=UTF-8'
        if content_type=="application/xhtml+xml":
            content_type = "text/html" # For now don't worry about xhtml
        if "text/html" in content_type:
            output = "html-strict"
        else:
            output = "xml"
	response.setHeader('Content-Type', content_type)
    else:
        if not allow(uri):
            uri = lookup(SERVER.unauthorized_content_handler)
            #response.setStatus(403, "Forbidden")
            assert uri, "No 'unauthorized_content' found for: %s" % uri
    value = redfoot.value(uri)
    if value and value.datatype==SERVER.Kid:
        if not hasattr(redfoot, "_kid_cache"):
            redfoot._kid_cache = {}
        code = redfoot._kid_cache.get(value)
        if code is None:
            code = kid_compiler.compile(StringIO(value.encode("utf-8")), filename=uri, encoding="utf-8")
            redfoot._kid_cache[value] = code
        exec code in context
	if write_to_response:
	    write_to_response = False
            try:
                write(response, encoding="utf-8", fragment=fragment, output=output or "xml")
            except Exception, e:
                redfoot.log.exception("While handling request for '%s' and trying to display %s (%s) the following exception occurred:\n" % (request.uri, redfoot.label(uri), uri))
            request.sources.pop()
	else:
            def pop():
                request.sources.pop()
                if False:
                    yield None

            class CleanupElementStream(kid.ElementStream):
                def __iter__(self):
                    return chain(ElementStream.__iter__(self), pop())
            return CleanupElementStream(pull())
         
    else:
	#write_to_response = True
        if write_to_response:
            redfoot.execute(uri, **context) # TODO: think we want context=context?
            request.sources.pop()
        else:
            def d():
                redfoot.execute(uri, **context)
                request.sources.pop()
                if False:
                    yield None
            return d()

]]>
    </rdf:value>
  </rdf:Description>

  <server:Handler rdf:about="#rdfxml_handler">
    <rdfs:label>Default RDF/XML handler</rdfs:label>      
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

response.setHeader('Content-Type', 'application/rdf+xml')            
cid = request.uri.abstract()
if (cid, RDF.type, REDFOOT.Context) in redfoot:
    base = None
else:
    cid = redfoot.context_id(cid) # default context
    base = redfoot.context_id(cid, context_id="") # TODO: basically defrag... need better way
context = redfoot.get_context(cid)
context.serialize(destination=response, base=base)
# NOTE: serialize calls close on response. So we should not call: response.finish() 

]]>
    </rdf:value>
  </server:Handler>


  <server:Handler rdf:about="#put_handler">
    <rdfs:label>Default GET handler</rdfs:label>      
    <server:display_support rdf:resource="#display_support"/>
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

auth = redfoot.module(URIRef("modules/auth#module", base=redfoot_program))
uid = auth.authenticate(request)
if uid and (uid, RDF.type, REDFOOT.Admin) in redfoot:
    #acid = request.uri.abstract()
    #if (acid, RDF.type, REDFOOT.Context) in redfoot:
    #    cid = redfoot.context_id(acid) # default context
    #else:
    #    cid = redfoot.context_id(request.uri) # default context
    cid = redfoot.context_id(request.uri) # default context
    #redfoot.remove_context(cid)
    context = redfoot.get_context(cid, creator=uid)
    context.remove((None, None, None))
    context.add((cid.defrag, RDF.type, URIRef("http://redfoot.net/rdf#RDFXMLDocument")))
    base = redfoot.context_id(cid, context_id="") # TODO: basically defrag... need better way.
    context.parse(request.content, publicID=base)
else:
    response.setStatus(401, "Not Authorized")            
    response.setHeader("WWW-Authenticate", "Basic realm='default'")
response.finish()

]]>
    </rdf:value>
  </server:Handler>

     <server:PageHandler rdf:ID="RDFXMLDocumentPageHandler">
      <rdfs:label>RDFXMLDocument PageHandler</rdfs:label>
      <server:content_type>application/rdf+xml</server:content_type>            
      <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[
document = request.uri

from rdflib.Graph import Graph
g = Graph(namespace_manager=redfoot.namespace_manager)

prefix = "%s#" % document

for s, p, o in redfoot:
    if s==document or (isinstance(s, unicode) and s.startswith(prefix)):
        g.add((s, p, o))
    ##
    # This was nice for somethings, but in the case of trying to round
    # trip an Ontology via HTTP PUT / GET from an editor... we end up
    # with instances from other contexts. Trying without for now.
    #if o==document or (isinstance(o, unicode) and o.startswith(prefix)):
    #    g.add((s, p, o))

response.setHeader('Content-Type', 'application/rdf+xml')            
g.serialize(destination=response)#, base=document)
]]>
      </rdf:value>
     </server:PageHandler>

</rdf:RDF>  
