<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:rdfe="http://redfoot.net/rdf#"
   xmlns:redfoot="http://redfoot.net/2005/redfoot#"
>

  <rdfe:RDFXMLDocument rdf:about="">
  </rdfe:RDFXMLDocument>
  
  <redfoot:Module rdf:ID="module">
    <rdfs:label></rdfs:label>      
    <rdfs:comment></rdfs:comment>    
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

import md5, sha

SESSION = redfoot.namespace("http://redfoot.net/2005/session#")
SERVER = redfoot.namespace("http://redfoot.net/2005/server#")

def authenticate(request, username=None, password=None):
    "Returns uid if authentication succeeds or None otherwise"

    message = ""

    session_id = request.session_id or request.create_session()
    if username is None:
        username = request.user
    if password is None:
        password = request.password

    if not username:
        username = BNode()
    elif username.startswith("http") or ("." in username and not "@" in username):
	if not username.startswith("http"):
	    username = "http://%s" % username
	from rdflib import Graph
	FOAF = redfoot.namespace("http://xmlns.com/foaf/0.1/")
	if not "#" in username:
	    username = "%s#" % username
	username = URIRef(username)
	g = Graph()
	if not username.startswith(request.host): # more checks localhost, server IP, etc.
            try:
                g.load(username)
            except Exception, e:
                message = "%s while trying to load from %s " % (str(e), username)
	    cid = redfoot.context_id(username, context_id="#user")
	    c = redfoot.get_context(cid)
	    c.add((username, RDF.type, SESSION.User))
	    c.remove((username, SESSION.hexdigest, None))
	    for hexdigest in g.objects(username, SESSION.hexdigest):
		c.add((username, SESSION.hexdigest, hexdigest))
	    label = g.label(username) or g.value(username, FOAF.name)
	    if label:
		c.remove((username, RDFS.label, None))            
		c.add((username, RDFS.label, label))
    elif not username.startswith("mailto:"):
        username = URIRef("mailto:%s" % username)
    if password:
        hexdigest = Literal(sha.new(password).hexdigest())
        md5_hexdigest = Literal(md5.new(password).hexdigest())
        if (username, SESSION.hexdigest, hexdigest) in redfoot:
            match = True
        elif (username, SESSION.hexdigest, md5_hexdigest) in redfoot:
            match = True
        else:
            match = False
    if password and match:
        if session_id:
	    c = redfoot.get_context(redfoot.context_id(session_id))
	    redfoot.remove((session_id, SESSION.authenticated, None))
	    c.add((session_id, SESSION.authenticated, Literal("True")))
	    redfoot.remove((session_id, SESSION.uid, None))
	    c.add((session_id, SESSION.uid, username))
	    redfoot.remove((session_id, SESSION.message, None))
        return username
    else:
        if session_id:
	    c = redfoot.get_context(redfoot.context_id(session_id))
	    redfoot.remove((session_id, SESSION.authenticated, None))
	    redfoot.remove((session_id, SESSION.uid, None))
	    c.add((session_id, SESSION.authenticated, Literal("False")))
	    redfoot.remove((session_id, SESSION.message, None))   
            msg = message or "invalid email or password"
	    c.add((session_id, SESSION.message, Literal(msg)))
        return None 


def allow(request, uri=None):
    if uri is None:
        uri = request.uri
    if (uri, SERVER.allow, None) in redfoot:
        session_id = request.session_id
        if session_id:
	    uid = redfoot.value(session_id, SESSION.uid)
	    if uid is None:
		return False
            if (REDFOOT.Globals, REDFOOT.admin, uid) in redfoot:
                return True
	    for allow in redfoot.objects(uri, SERVER.allow):
		if allow==uid:
		    return True
		elif (uid, RDF.type, allow) in redfoot:
		    return True
        return False
    else:
        return True

]]>
    </rdf:value>
  </redfoot:Module>

</rdf:RDF>  
