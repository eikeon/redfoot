<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:rdfe="http://redfoot.net/rdf#"
   xmlns:redfoot="http://redfoot.net/2005/redfoot#"
   xmlns:server="http://redfoot.net/2005/server#"
   xmlns:commands="http://redfoot.net/2005/commands#"
>

  <rdfe:RDFXMLDocument rdf:about="">
  </rdfe:RDFXMLDocument>
  
  <redfoot:Module rdf:about="#client">
    <rdfs:label>XMPP Client</rdfs:label>      
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

import logging

_logger = logging.getLogger(__uri__)

from twisted.words.protocols.jabber import client

try:
    client.XMPPClientFactory
    module_uri = URIRef("#client_2.4.0+", base=__uri__)
except AttributeError, e:
    _logger.info("Falling back to 2.4.0 client implementation")
    module_uri = URIRef("#client_2.4.0", base=__uri__)    

xmpp = redfoot.module(module_uri)    

from twisted.words.xish import domish
from twisted.words.protocols.jabber import jid

class Client(xmpp.Client):
###

    def authenticated(self, xmlstream):
        _logger.info("XMPP Client Authenticated")
        self.xmlstream = xmlstream

        #presence = domish.Element((None, 'presence'))
        #xmlstream.send(presence)

        presence = domish.Element(('jabber:client','presence'))
        photo = presence.addElement("photo", "vcard-temp:x:update", "0709d4740da5b3325678f2ee1062993c9a7113fa")
        presence.addElement("x", 'vcard-temp:x:update', photo)
        xmlstream.send(presence)

        xmlstream.addObserver('/message',  self.message)
        xmlstream.addObserver('/presence', self.presence)
        xmlstream.addObserver('/iq',       self.iq)   
        xmlstream.addObserver('/*',       self.debug)   
        if self.pending:
            pending = list(self.pending)
            self.pending = []
            for message in pending:
                self.xmlstream.send(message)

    def message(self, message):
        import sys
        from optparse import OptionParser
        from StringIO import StringIO
        #import threading
        from threading import Thread
        from_id = message["from"]
        command_line = None
        e = message.firstChildElement()
        if e.name=="body":
            command_line = "%s" % e

        from_uri = URIRef("mailto:%s" % jid.JID(from_id).userhost())
        is_admin = (from_uri, RDF.type, REDFOOT.Admin) in redfoot

        if command_line and command_line.startswith("redfoot"):
            def run_command(command_line, from_id, xmpp):
                sio = StringIO()
                orig = sys.stdout, sys.stderr
                sys.stdout = sio
                sys.stderr = sio
                parser = OptionParser("usage: command <options>")
                parser.allow_interspersed_args = False
                args = command_line.split()
                (options, args) = parser.parse_args(args[1:])
                options.program = None
                redfoot.main(options, args)
                sys.stdout, sys.stderr = orig
                # TODO: pipe command stdout back to user
                result = sio.getvalue()
                for line in result.split("\n"):
                    xmpp.send(from_id, line)
            if is_admin:
                t = Thread(target=run_command, args=(command_line, from_id, self))
                t.start()
            else:
                self.send(from_id, "You need to be an admin to run commands.")
        else:
            self.send(from_id, "Thank you for your input. But I'm going to ignore it.")
    
    def presence(self, presence):
        if presence.hasAttribute("type") and presence["type"]=="subscribe":
            response = domish.Element(('jabber:client','presence'))
            response["to"] = presence["from"]
            response["from"] = self.client_jid.full()
            response["type"] = "subscribed"
            self.xmlstream.send(response)

    def iq(self, iq):
        pass

    def debug(self, element):
        _logger.debug(element.toXml().encode('utf-8'))
            
    def send(self, to, msg, html=None):
        """to is an identifier of a person or a class of people. msg is the
        text message to send and html is an html version of the message. """
        users = []
        if isinstance(to, URIRef):
            if (to, RDF.type, RDFS.Class) in redfoot:
                for user in redfoot.subjects(RDF.type, to):
                    xmpp_id = user.split("mailto:")[-1]
                    if "@" in xmpp_id:
                        users.append(xmpp_id)
            else:
                users.append(to)
        else:
            users.append(to)
        for user in users:
            message = domish.Element(('jabber:client','message'))
            message["to"] = user
            message["from"] = self.client_jid.full()
            message["id"] = "%s" % __uri__ # uri of this module
            message["type"] = "chat"
            message.addElement("body", "jabber:client", msg)
            if html:
                e = message.addElement("html", "http://jabber.org/protocol/xhtml-im")
                e.addRawXml(html)
            if self.xmlstream:
                self.xmlstream.send(message)
            else:
                self.pending.append(message)

]]>
    </rdf:value>
  </redfoot:Module>

  <redfoot:Module rdf:about="#client_2.4.0+">
    <rdfs:label>XMPP Client</rdfs:label>      
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

import logging

_logger = logging.getLogger(__uri__)

from twisted.internet import reactor
from twisted.names.srvconnect import SRVConnector
from twisted.words.protocols.jabber import xmlstream, client, jid


class XMPPClientConnector(SRVConnector):
    def __init__(self, reactor, domain, factory):
        SRVConnector.__init__(self, reactor, 'xmpp-client', domain, factory)


    def pickServer(self):
        host, port = SRVConnector.pickServer(self)

        if not self.servers and not self.orderedServers:
            # no SRV record, fall back..
            port = 5222

        return host, port



class Client(object):
    def __init__(self, client_id, secret, _host_no_longer_needed, _port_no_longer_needed):
        self.xmlstream = None
        self.pending = []
        self.client_jid = client_jid = jid.JID(client_id)
        f = client.XMPPClientFactory(client_jid, secret)
        f.addBootstrap(xmlstream.STREAM_CONNECTED_EVENT, self.connected)
        f.addBootstrap(xmlstream.STREAM_END_EVENT, self.disconnected)
        f.addBootstrap(xmlstream.STREAM_AUTHD_EVENT, self.authenticated)
        f.addBootstrap(xmlstream.INIT_FAILED_EVENT, self.init_failed)
        connector = XMPPClientConnector(reactor, client_jid.host, f)
        connector.connect()

    def connected(self, xs):
        _logger.info('Connected.')
        self.xmlstream = xs

    def disconnected(self, xs):
        _logger.info('Disconnected.')

    def init_failed(self, failure):
        _logger.info("Initialization failed.")
        _logger.info(failure)
        self.xmlstream.sendFooter()


]]>
    </rdf:value>
  </redfoot:Module>

  <redfoot:Module rdf:about="#client_2.4.0">
    <rdfs:label>XMPP Client</rdfs:label>      
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

import logging

_logger = logging.getLogger(__uri__)

from twisted.words.protocols.jabber import client, jid
from twisted.words.xish import domish
from twisted.internet import reactor
        
from twisted.words.protocols.jabber.client import BasicAuthenticator

class Client(object):
    def __init__(self, client_id, password, host, port):
        self.xmlstream = None
        self.pending = []
        self.client_jid = client_jid = jid.JID(client_id)
        factory = client.basicClientFactory(client_jid, password)
        factory.addBootstrap('//event/stream/authd', self.authenticated)
        factory.addBootstrap(BasicAuthenticator.INVALID_USER_EVENT, self._invalid_user)
        factory.addBootstrap(BasicAuthenticator.AUTH_FAILED_EVENT, self._auth_failed)
        factory.addBootstrap(BasicAuthenticator.REGISTER_FAILED_EVENT, self._register_failed)
        reactor.connectTCP(host, port, factory)

    def _invalid_user(self, failure):
        _logger.error("Invalid User: %s" % failure)

    def _auth_failed(self, failure):
        _logger.error("Auth Failed: %s" % failure)

    def _register_failed(self, failure):
        _logger.error("Register User: %s" % failure)

]]>
    </rdf:value>
  </redfoot:Module>

  <redfoot:Module rdf:about="#logging">
    <rdfs:label>XMPP Loggin</rdfs:label>      
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

import logging


class XMPPHandler(logging.Handler):
    """
    A handler class which sends an XMPP message for each logging event to a list of users.
    """
    def __init__(self, who=None):
        logging.Handler.__init__(self)
        self.who = who


    def emit(self, record):
        try:
            msg = self.format(record)
            redfoot.xmpp.send(self.who, msg)
        except:
            self.handleError(record)

def install(who):
    _root_logger = logging.getLogger()
    _root_logger.setLevel(logging.INFO)
    _root_formatter = logging.Formatter('[%(name)s] %(message)s')
    _root_handler = XMPPHandler(who)
    _root_handler.setFormatter(_root_formatter)
    _root_logger.addHandler(_root_handler)

]]>
    </rdf:value>
  </redfoot:Module>

  <rdf:Description rdf:about="http://redfoot.net/2005/redfoot#Globals">
    <commands:config>
      <redfoot:Configuration rdf:ID="xmpp_config">    
        <commands:command rdf:resource="#xmpp_info"/>                
      </redfoot:Configuration>
    </commands:config>
  </rdf:Description>

  <commands:Command rdf:ID="xmpp_info">
    <rdfs:label>xmpp_info</rdfs:label>
    <redfoot:code>
     <redfoot:Python rdf:ID="xmpp_logger_code">
      <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

import twisted 

if twisted.__version__.startswith("2.4.0+"):
    assert len(args)==2, "expecting 2 arguments: xmpp_id, xmpp_password"
    redfoot.xmpp_id = args[0]
    redfoot.xmpp_password = args[1]
else:
    assert len(args)==4, "expecting 4 arguments: xmpp_id, xmpp_password, xmpp_host, xmpp_port"
    redfoot.xmpp_id = args[0]
    redfoot.xmpp_password = args[1]
    redfoot.xmpp_host = args[2]
    redfoot.xmpp_port = args[3]

]]>
      </rdf:value>
     </redfoot:Python>
    </redfoot:code>
  </commands:Command>


</rdf:RDF>  
