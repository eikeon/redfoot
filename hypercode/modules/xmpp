<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:rdfe="http://redfoot.net/rdf#"
   xmlns:redfoot="http://redfoot.net/2005/redfoot#"
   xmlns:server="http://redfoot.net/2005/server#"
   xmlns:commands="http://redfoot.net/2005/commands#"
>

  <rdfe:RDFXMLDocument rdf:about="">
  </rdfe:RDFXMLDocument>
  
  <redfoot:Module rdf:about="#client">
    <rdfs:label>XMPP Client</rdfs:label>      
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

from twisted.words.protocols.jabber import client, jid
from twisted.words.xish import domish
from twisted.internet import reactor
        

class Client(object):
    def __init__(self, client_id, password, host, port):
        self.xmlstream = None
        self.pending = []
        self.client_id = client_id = jid.JID(client_id)
        factory = client.basicClientFactory(client_id, password)
        factory.addBootstrap('//event/stream/authd', self._authd)
        reactor.connectTCP(host, port, factory)

    def _authd(self, xmlstream):
        redfoot.log.info("XMPP Client Authenticated")
        self.xmlstream = xmlstream

        presence = domish.Element(('jabber:client','presence'))
        xmlstream.send(presence)

        xmlstream.addObserver('/message',  self.message)
        xmlstream.addObserver('/presence', self.presence)
        xmlstream.addObserver('/iq',       self.iq)   
        #xmlstream.addObserver('/',       self.debug)   
        if self.pending:
            pending = list(self.pending)
            self.pending = []
            for message in pending:
                self.xmlstream.send(message)

    def message(self, message):
        #self.debug(message)
        import sys
        from optparse import OptionParser
        from StringIO import StringIO
        #import threading
        from threading import Thread
        from_id = message["from"]
        command_line = None
        e = message.firstChildElement()
        if e.name=="body":
            command_line = "%s" % e
        if command_line and command_line.startswith("redfoot"):
            def run_command(command_line, from_id, xmpp):
                xmpp.send(from_id, "running: %s" % command_line)
                parser = OptionParser("usage: command <options>")
                parser.allow_interspersed_args = False
                args = command_line.split()
                (options, args) = parser.parse_args(args[1:])
                options.program = None
                #d = threading.locals()
                sio = StringIO()
                orig = sys.stdout
                sys.stdout = sio
                redfoot.main(options, args)
                sys.stdout = orig
                # TODO: pipe command stdout back to user
                result = sio.getvalue()
                html = """<body xmlns='http://www.w3.org/1999/xhtml' style='background-color:#E8A630;color:#000000'><span style='font-family:Verdana'>%s</span></body>""" % "<br/>".join(result.split("\n"))

                xmpp.send(from_id, "--", html)
                xmpp.send(from_id, "Done running: %s" % command_line)

            t = Thread(target=run_command, args=(command_line, from_id, self))
            t.start()
        else:
            print "command line: '%s'" % command_line
    
    def presence(self, presence):
        #self.debug(presence)
        if presence["type"]=="subscribe":
            response = domish.Element(('jabber:client','presence'))
            response["to"] = presence["from"]
            response["from"] = self.client_id.full()
            response["type"] = "subscribed"
            self.xmlstream.send(response)

    def iq(self, iq):
        #self.debug(iq)
        pass

    def debug(self, element):
        print element.toXml().encode('utf-8')
        print "="*20
            
    def send(self, to, msg, html=None):
        message = domish.Element(('jabber:client','message'))
        message["to"] = to
        message["from"] = self.client_id.full()
        message["id"] = "%s" % __uri__ # uri of this module
        message["type"] = "chat"
        message.addElement("body", "jabber:client", msg)
        if html:
            e = message.addElement("html", "http://jabber.org/protocol/xhtml-im")
            e.addRawXml(html)
        if self.xmlstream:
            self.xmlstream.send(message)
        else:
            self.pending.append(message)
        #self.debug(message)


#c = Client(JID('redfoot@eikeon.com', 'password_here', 'eikeon.com', 5222))
#reactor.run()

]]>
    </rdf:value>
  </redfoot:Module>

  <redfoot:Module rdf:about="#logging">
    <rdfs:label>XMPP Loggin</rdfs:label>      
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

import logging


class XMPPHandler(logging.Handler):
    """
    A handler class which sends an XMPP message for each logging event to a list of users.
    """
    def __init__(self, users=None):
        logging.Handler.__init__(self)
        self.users = users


    def emit(self, record):
        try:
            msg = self.format(record)
            for user in self.users:
                redfoot.xmpp.send(user, msg)
        except:
            self.handleError(record)

def install(users):
    _root_logger = logging.getLogger()
    _root_logger.setLevel(logging.INFO)
    _root_formatter = logging.Formatter('[%(name)s] %(message)s')
    _root_handler = XMPPHandler(users)
    _root_handler.setFormatter(_root_formatter)
    _root_logger.addHandler(_root_handler)

]]>
    </rdf:value>
  </redfoot:Module>

  <rdf:Description rdf:about="http://redfoot.net/2005/redfoot#Globals">
    <commands:config>
      <redfoot:Configuration rdf:ID="xmpp_config">    
        <commands:command rdf:resource="#xmpp_info"/>                
      </redfoot:Configuration>
    </commands:config>
  </rdf:Description>

  <commands:Command rdf:ID="xmpp_info">
    <rdfs:label>xmpp_info</rdfs:label>
    <redfoot:code>
     <redfoot:Python rdf:ID="xmpp_logger_code">
      <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

assert len(args)==4, "expecting 4 arguments: xmpp_id, xmpp_password, xmpp_host, xmpp_port"

redfoot.xmpp_id = args[0]
redfoot.xmpp_password = args[1]
redfoot.xmpp_host = args[2]
redfoot.xmpp_port = args[3]

]]>
      </rdf:value>
     </redfoot:Python>
    </redfoot:code>
  </commands:Command>


</rdf:RDF>  
