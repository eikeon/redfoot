<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:rdfe="http://redfoot.net/rdf#"
   xmlns:redfoot="http://redfoot.net/2005/redfoot#"
   xmlns:server="http://redfoot.net/2005/server#"
>

  <rdfe:RDFXMLDocument rdf:about="">
  </rdfe:RDFXMLDocument>
  
  <server:Server rdf:about="#twisted">
    <rdfs:label>twisted server for Redfoot</rdfs:label>      
    <server:handler rdf:resource="../handlers/page#"/>
    <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

from twisted.web.server import Site, NOT_DONE_YET, version
from twisted.web.resource import IResource
from twisted.internet import reactor

from zope.interface import Attribute, implements

import redfootlib
import rdflib
from rdflib import URIRef, BNode, RDF, RDFS
from rdflib.util import date_time

from urllib import unquote

from itertools import chain

from string import ascii_letters
from random import choice
import md5, time
from base64 import b64encode

from cStringIO import StringIO

SERVER = redfoot.namespace("http://redfoot.net/2005/server#")
SESSION = redfoot.namespace("http://redfoot.net/2005/session#")


class Request(object):
    def __init__(self, request):
        self.__request = request
        self.__parameters = None        
        self.__session_id = None
        self.method = self.__request.method
        #self.query_string = self.__request.request_data.query
        hostname = self.getHeader("host")
        assert hostname, "hostname is required"
        hostname = hostname.lower()
        self.path = path = unquote(self.__request.path)
        self.url = URIRef("http://%s%s" % (hostname, path))
        self.host_url = URIRef("http://%s" % (hostname))

        if hostname:
            if ":" in hostname:
                name, port = hostname.split(":", 1)
                if port=="80":
                    hostname = name
        else:
            redfoot.log.warning("warning: no hostname found")
            hostname = ''
        self.uri = URIRef("http://%s%s" % (hostname, path))
        self.host = URIRef("http://%s" % (hostname))
        self.sources = [self.uri, self.host, redfoot.uri]
        
    def getCookie(self, name, default=None):
        return self.__request.received_cookies.get(name, default)

    def getHeader(self, name, default=None):
        return self.__request.received_headers.get(name, default)    

    def _getHeaders(self):
        return self.__request.received_headers
    
    headers = property(_getHeaders)

    def _getParameters(self):
        # TODO: make parameters read-only?
        if self.__parameters == None:
            self.__parameters = p =  {}
            for k, v in self.__request.args.iteritems():
                if len(v)>=0:
                    p[k] = v[0]
                else:
                    p[k] = None
        return self.__parameters

    parameters = property(_getParameters)

    def __getUser(self):
        return self.__request.getUser()
    user = property(__getUser)
    def __getPassword(self):
        return self.__request.getPassword()
    password = property(__getPassword)

    def __getContent(self):
       return self.__request.content
    content = property(__getContent)

    def lookup(self, property, default=None, uri=None):
        uri = uri or self.uri
        sources = chain([uri], redfoot.types(uri), [self.host, redfoot.uri, REDFOOT.Globals]) 
        # add self.sources as additional sources; first, let's see if
        # we can find what's depending on them and make a test case
        if (uri, RDF.type, RDFS.Class) in redfoot:
            sources.next() # ignore uri
        for source in sources: 
            p = redfoot.value(source, property)
	    if p:
		return p
	return default

    def objects(self, predicate):
        # being used in hypercode/handlers/page#put_handler
        sources = chain([self.uri], redfoot.types(self.uri), [self.host, redfoot.uri, REDFOOT.Globals]) 
        if (self.uri, RDF.type, RDFS.Class) in redfoot:
            sources.next() # ignore self.uri
        for source in sources: 
            for p in redfoot.objects(source, predicate):
                yield p

    def relative(self, uri):
        if not uri.startswith(self.host):
            return "%s/;%s" % (self.host, uri)
        return uri

    def __getSessionID(self, value=None):
        session_id = self.__session_id
        if session_id is None:
            value = value or self.getCookie("redfoot", None)
            if value:
                hash = md5.new(value).hexdigest()
                session_id = URIRef("%s/session/%s#" % (self.host, hash))
                self.__session_id = session_id
        return session_id
    session_id = property(__getSessionID)

    def __random_hash(self):
        m = md5.new()
        m.update(str([choice(ascii_letters) for i in xrange(0, 8)]))
        m.update(str(time.time()))
        return m.hexdigest()

    def create_session(self):
        value = self.__random_hash()
	self.__request.cookies.append("redfoot=%s; path=/; Expires=Wed, 01 Jan 2020 00:00:00 GMT" % value)
        session_id = self.__getSessionID(value)
        context = redfoot.get_context(redfoot.context_id(session_id))
	context.add((session_id, RDF.type, SESSION.Session))
	context.add((session_id, SESSION.created, Literal(date_time())))
        return session_id

    def __getUserID(self):
        session_id = self.session_id
        if session_id:
            return redfoot.value(session_id, SESSION.uid)
        else:
            return None
    user_id = property(__getUserID)


class Response(object):
    def __init__(self, request):
        self.__request = request
        self.__body = None

    def __getCacheBody(self): 
        if self.__body is None:
            return False
        else:
            return True

    def __setCacheBody(self, value):
        if value:
            if self.__body is None:
                self.__body = StringIO()
        else:
            raise Exception("can not turn body caching back off")

    cache_body = property(__getCacheBody, __setCacheBody)

    def __getBody(self):
        body = self.__body
        if body is not None:
            return body.getvalue()
        else:
            raise Exception("cache body not set.") 
    body = property(__getBody)


    def setStatus(self, status, reason):
        self.__request.setResponseCode(status, reason)

    def write(self, data):
        if isinstance(data, unicode):
            data = data.encode("UTF-8")
        body = self.__body
        if body:
            body.write(data)
        else:
            self.__request.write(data)

    def finish(self):
        if self.__body:
            body = self.body 
            self.setHeader('content-length', str(len(body)))
            encoded_md5_digest = b64encode(md5.new(body).digest())
            self.setHeader("Content-MD5", encoded_md5_digest)
            self.setHeader("ETag", '"%s"' % encoded_md5_digest)
            self.__request.write(body)
        self.__request.finish()
    
    def setHeader(self, name, value):
        # TODO: can the value be utf-8 encoded or just ascii or ?        
        value = value.encode("utf-8")
        self.__request.setHeader(name, value)

    def addCookie(self, cookie):
        self.__request.cookies.append(cookie)


class _Resource(object):

    implements(IResource)

    isLeaf = True

    def render(self, twisted_request):
        request = Request(twisted_request)
        response = Response(twisted_request)

        handler = redfoot.value(request.uri, SERVER.handler) or redfoot.value(request.host, SERVER.handler) or redfoot.value(redfoot_current, SERVER.handler)

        # For Server header format see: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.38
        response.setHeader("Server", "Redfoot/%s rdflib/%s %s Kernel/%s Server/%s Handler/%s)" % 
                           (redfootlib.__version__, rdflib.__version__, version, redfoot.uri, redfoot_current, handler))
        redfoot.execute(handler, request=request, response=response)

        # Note: it is the handler's job to call response.finish()
        # handlers can also do deferToThread (For example see handlers/page#)
        return NOT_DONE_YET


class Server(object):

    def __init__(self, hostname='', port=9090):
        self.hostname = hostname
        self.port = port
        
    def run(self):
        try:
            reactor.listenTCP(self.port, Site(_Resource()))
            try:
                reactor.run()
            except ValueError:
                reactor.run(installSignalHandlers=0)
        except KeyboardInterrupt: # TODO: 
            redfoot.log.info('shutting down...')
            reactor.shutdown()
        
]]>
    </rdf:value>
  </server:Server>

</rdf:RDF>  
