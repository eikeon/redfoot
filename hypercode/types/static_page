<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:redfoot="http://redfoot.net/2005/redfoot#"
   xmlns:server="http://redfoot.net/2005/server#"
   xmlns:commands="http://redfoot.net/2005/commands#"
>

  <rdf:Description rdf:about="http://redfoot.net/2005/redfoot#Globals">
    <commands:config>
      <redfoot:Configuration rdf:ID="static_config">
        <rdfs:label>static commands config</rdfs:label>
        <rdfs:comment>A configuration with all the commands for static file management</rdfs:comment>
        <commands:command rdf:resource="#import_static"/>
        <commands:command rdf:resource="#export_static"/>
      </redfoot:Configuration>
    </commands:config>
  </rdf:Description>

  <commands:Command rdf:ID="import_static">
    <rdfs:label>import_static</rdfs:label>
    <rdfs:comment>imports static files into redfoot</rdfs:comment>
    <redfoot:code>
     <redfoot:Python rdf:ID="import_static_code">
       <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[
import string, sys

text_characters = "".join(map(chr, range(32, 127)) + list("\n\r\t\b"))
_null_trans = string.maketrans("", "")

def istextfile(filename, blocksize = 512):
    return istext(open(filename).read(blocksize))

def istext(s, threshold=0.3):
    if "\0" in s:
        return False
    
    if not s:  # Empty files are considered text
        return True

    # Get the non-text characters (maps a character to itself then
    # use the 'remove' option to get rid of the text characters.)
    t = s.translate(_null_trans, text_characters)

    # If more than threshold non-text characters, then
    # this is considered a binary file
    return len(t) <= len(t) * threshold

import os, sys
from os.path import join, getsize, splitext
from base64 import b64encode

StaticPage = URIRef("http://redfoot.net/2005/server#StaticPage")
base64Binary = URIRef("http://www.w3.org/2001/XMLSchema#base64Binary")

SERVER = redfoot.namespace("http://redfoot.net/2005/server#")

# TODO: usage
base = redfoot.absolutize(args[0])

# TODO: add more common types
content_types = {
"css": "text/css",
"png": "image/png",
"js": "application/x-javascript",
"html": "text/html",
}

# TODO: take root as optional second argument?
for root, dirs, files in os.walk('html'):
    for name in files:
        if not name.endswith("~"):
            filename = join(root, name)
            pathname = "." + filename[len('html'):]
            uri = URIRef(pathname, base=base)
            c = redfoot.get_context(redfoot.context_id(uri))
            c.add((uri, RDF.type, StaticPage))
            if istextfile(filename):
                value = Literal(file(filename).read())
            else:
                s = b64encode(file(filename).read())
                value = Literal(s, datatype=base64Binary)
            c.remove((uri, RDF.value, None))
            c.add((uri, RDF.value, value))

            _, ext = splitext(name)
            if ext:
                content_type = content_types.get(ext[1:])
                if content_type:
                    c.add((uri, SERVER.content_type, Literal(content_type)))

    if 'CVS' in dirs:
        dirs.remove('CVS')  # don't visit CVS directories

]]>
       </rdf:value>
     </redfoot:Python>
    </redfoot:code>
  </commands:Command>

  <commands:Command rdf:ID="export_static">
    <rdfs:label>export_static</rdfs:label>
    <rdfs:comment>exports static files into redfoot</rdfs:comment>
    <redfoot:code>
     <redfoot:Python rdf:ID="export_static_code">
       <rdf:value rdf:datatype="http://redfoot.net/2005/redfoot#Python">
<![CDATA[

StaticPage = URIRef("http://redfoot.net/2005/server#StaticPage")
base64Binary = URIRef("http://www.w3.org/2001/XMLSchema#base64Binary")

from base64 import b64decode
from os import makedirs
from os.path import join, dirname, exists

prefix = args[0]

for page in redfoot.subjects(RDF.type, StaticPage):
    if page.startswith(prefix):
        path = join("html", page.replace(prefix, ""))
        dir = dirname(path)
        if not exists(dir):
            makedirs(dir)
        f = file(path, mode="wb")
        value = redfoot.value(page, RDF.value)
        if value:
            if value.datatype==base64Binary:
                f.write(b64decode(value))
            else:
                f.write(value)
        f.close()

]]>
       </rdf:value>
     </redfoot:Python>
    </redfoot:code>
  </commands:Command>


</rdf:RDF>  
