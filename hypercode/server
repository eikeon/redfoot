<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:rdfe="http://redfoot.net/rdf#"
   xmlns:code="http://redfoot.net/hypercode/code#"
   xmlns:server="http://redfoot.net/hypercode/server#"
   xmlns:command="http://redfoot.net/hypercode/command#"
   xmlns:template="http://redfoot.net/hypercode/template#"
>

  <rdfe:RDFXMLDocument rdf:about="">
  </rdfe:RDFXMLDocument>
  
  <rdfe:Namespace rdf:about="#">
    <rdfs:label>Server</rdfs:label>
    <rdfs:comment>The Redfoot server namespace.</rdfs:comment>
  </rdfe:Namespace>

  <rdfs:Class rdf:ID="Server">
    <rdfs:label>Server</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://redfoot.net/hypercode/code#Module"/>
  </rdfs:Class>

  <rdf:Property rdf:ID="server">
    <rdfs:label>server</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/kernel#Kernel"/>
    <rdfs:range rdf:resource="#Server"/>
  </rdf:Property>

  <rdfs:Class rdf:ID="Handler">
    <rdfs:label>Server Handler</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://redfoot.net/hypercode/code#Code"/>
  </rdfs:Class>

  <rdf:Property rdf:ID="handler">
    <rdfs:label>server handler</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/kernel#Kernel"/>
    <rdfs:domain rdf:resource="#Server"/>
    <rdfs:range rdf:resource="#Handler"/>
  </rdf:Property>

  <rdfs:Class rdf:ID="Site">
    <rdfs:label>Site</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:subClassOf rdf:resource="redfoot#Resource"/>
    <server:allow rdf:resource="#Admin"/>
    <template:content>
      <server:PagePartHandler rdf:ID="site_handler">
        <rdfs:label>Site Handler</rdfs:label>
        <rdf:value rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[
<div xmlns:kid="http://purl.org/kid/ns#" kid:strip="">
<?python
Site = URIRef("http://redfoot.net/hypercode/server#Site")
allowed = allow(Site)

action = request.parameters.get("action")
label = request.parameters.get("label")
site = request.uri.abstract()
if action=="set_label":
    # TODO: ah... we should have get_context just do the context_id bit.
    context = redfoot.get_context(redfoot.context_id(site, context_id="context"))
    if allowed:
        redfoot.remove((site, RDFS.label, None))
        context.add((site, RDFS.label, Literal(label)))
site_label = redfoot.value(site, RDFS.label, any=True)

aspects = []
for aspect in redfoot.subjects(RDF.type, URIRef("http://redfoot.net/hypercode/aspect#Aspect")):
    redfoot.check(aspect)
    label = redfoot.label(aspect) or aspect
    aspects.append((label, aspect))
aspects.sort()

import rdflib, redfootlib, twisted, kid
?>

  <form kid:if="allowed" method="POST" action="" style="display: inline">
    <p kid:if="allowed">Set Site Label:
      <input type="text" name="label" value="${site_label}"/>
      <input type="submit" name="action" value="set_label"/>
    </p>
  </form>

  <span kid:if="allowed" kid:strip="">  
  <h3>Aspects</h3>
  <ul>
    <li kid:for="label, aspect in aspects">
      <a href="${request.relative(aspect.concrete())}">${label}</a>
    </li>
  </ul>
  </span>

  <h3>Version Info</h3>
  <ul>
    <li>redfoot: ${redfootlib.__version__}</li>
    <li>rdflib: ${rdflib.__version__} (${rdflib.__date__})</li>
    <li>kernel: ${redfoot.uri}</li>
    <li>twisted: ${twisted.__version__}</li>
    <li>kid: ${kid.__version__}</li>
  </ul>

  <h3>Stats</h3>
  <ul>
    <li>Number of Triples: ${len(redfoot)}</li>
    <li>Number of Contexts: ${len(list(redfoot.contexts()))}</li>
  </ul>

</div>
]]>
        </rdf:value>
      </server:PagePartHandler>
    </template:content>
  </rdfs:Class>

  <rdf:Property rdf:ID="site">
    <rdfs:label>site</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:range rdf:resource="#Site"/>
  </rdf:Property>

  <rdfs:Class rdf:ID="Page">
    <rdfs:label>Page</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:subClassOf rdf:resource="redfoot#Resource"/>
  </rdfs:Class>

  <rdfs:Class rdf:ID="StaticPage">
    <rdfs:label>Static Page</rdfs:label>
    <rdfs:comment>A page that is served from the filesystem or somesuch.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="redfoot#Resource"/>
    <server:supported_content_types>*/*</server:supported_content_types>
    <server:page_handler>
      <server:PageHandler rdf:ID="file_handler">
        <server:content_type>*/*</server:content_type>
        <rdfs:label>file handler</rdfs:label>
        <server:long_running>true</server:long_running>
        <rdf:value rdf:datatype="http://redfoot.net/hypercode/redfoot#Python">
<![CDATA[
import os
from os.path import join, exists
from base64 import b64decode

base64Binary = URIRef("http://www.w3.org/2001/XMLSchema#base64Binary")

content_type = redfoot.value(request.uri, SERVER.content_type)
if content_type:
    response.setHeader('Content-Type', content_type)

# TODO: grab root for site instead of hard-coded value of html
html_root = "html"

path = request.uri.replace(request.host, '.')
# TODO: url2pathname

if ".." not in path:
    filename = join(os.getcwd(), join(html_root, path))

    # TODO: support if-modified-since as well as sending last-modified
    if exists(filename):
        #redfoot.log.info("Serving from html dir: %s" % filename)
        f = file(filename)
        response.write(f.read())
        f.close()
    else:
        #redfoot.log.info("Serving from rdf: %s" % filename)
        value = redfoot.value(request.uri, RDF.value)
        if value:
            if value.datatype==base64Binary:
                response.write(b64decode(value))
            else:
                response.write(value)

]]>
        </rdf:value>
      </server:PageHandler>
    </server:page_handler>
  </rdfs:Class>

  <rdfs:Class rdf:ID="PageHandler">
    <rdfs:label>Page Handler</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://redfoot.net/hypercode/redfoot#Code"/>
  </rdfs:Class>

  <rdfs:Class rdf:ID="PagePartHandler">
    <rdfs:label>Page Part Handler</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://redfoot.net/hypercode/redfoot#Code"/>
  </rdfs:Class>

  <rdf:Property rdf:ID="page_handler">
    <rdfs:label>page handler</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="#Site"/>
    <rdfs:domain rdf:resource="#Page"/>
    <rdfs:range rdf:resource="#PageHandler"/>
  </rdf:Property>

  <rdf:Property rdf:ID="unauthorized_page_handler">
    <rdfs:label>unauthorized page handler</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="#Site"/>
    <rdfs:domain rdf:resource="#Page"/>
    <rdfs:range rdf:resource="#Handler"/>
  </rdf:Property>

  <rdf:Property rdf:ID="unauthorized_content_handler">
    <rdfs:label>unauthorized content handler</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="#Site"/>
    <rdfs:domain rdf:resource="#Page"/>
    <rdfs:range rdf:resource="#Handler"/>
  </rdf:Property>

  <rdf:Property rdf:ID="allow">
    <rdfs:label>allow</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/redfoot#Kernel"/>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Site"/>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Page"/>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#PagePartHandler"/>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/> <!-- TODO make this more specific.. Agent? -->
  </rdf:Property>

  <rdf:Property rdf:ID="session_support">
    <rdfs:label>session support</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Handler"/>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/redfoot#Kernel"/>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Site"/>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Page"/>
  </rdf:Property>

  <rdf:Property rdf:ID="display_support">
    <rdfs:label>display support</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/redfoot#Kernel"/>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Site"/>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Page"/>
  </rdf:Property>

  <rdfs:Datatype rdf:ID="Kid">
    <rdfs:label>Kid</rdfs:label>
    <rdfs:comment></rdfs:comment>
  </rdfs:Datatype>

  <rdf:Property rdf:ID="content_type">
    <rdfs:label>content_type</rdfs:label>
    <rdfs:comment></rdfs:comment>
  </rdf:Property>

  <rdf:Property rdf:ID="supported_content_types">
    <rdfs:label>supported_content_types</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Page"/>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
  </rdf:Property>

  <rdf:Property rdf:ID="alternate">
    <rdfs:label>alternate</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="http://redfoot.net/hypercode/server#Page"/>
    <rdfs:range rdf:resource="http://redfoot.net/hypercode/server#Page"/>
  </rdf:Property>

  <rdf:Property rdf:ID="long_running">
    <rdfs:label>long running</rdfs:label>
    <rdfs:comment>Used to indicate that the caculation of the page may take some time</rdfs:comment>
    <rdfs:domain rdf:resource="#Page"/>
    <!--<rdfs:range rdf:resource="#Handler"/>-->
  </rdf:Property>

  <rdf:Property rdf:ID="last_modified">
    <rdfs:label>last modified</rdfs:label>
    <rdfs:comment>Used to indicate the value of the HTTP headr last modified in seconds since epoch</rdfs:comment>
    <rdfs:domain rdf:resource="#Site"/>
    <rdfs:domain rdf:resource="#Page"/>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/> <!-- seconds since epoch -->
  </rdf:Property>

  <rdf:Property rdf:ID="etag">
    <rdfs:label>etag</rdfs:label>
    <rdfs:comment></rdfs:comment>
    <rdfs:domain rdf:resource="#CachedPage"/>
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
  </rdf:Property>

  <command:Command rdf:ID="server_command">
    <rdfs:label>server</rdfs:label>
    <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

port = 80
if len(args)>0:
    try:
        port = int(args[0])
    except:
	print "invalid port of '%s'" % port
    
print "running server on port %s" % port
redfoot.execute(URIRef("#twisted", base=__uri__), context=globals())
Server(port=port).run()

]]>
    </code:python>
  </command:Command>

  <code:Code rdf:about="#twisted">
    <rdfs:label>twisted server for Redfoot</rdfs:label>      
    <server:handler rdf:resource="handlers/page#"/>
    <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

import logging

_logger = logging.getLogger(__uri__)

try:
    import twisted
except ImportError, e:
    raise ImportError("Twisted not installed. Please install Twisted-2.5.0 ( http://twistedmatrix.com/trac/#Downloading )")

from twisted.web.server import Site, NOT_DONE_YET, version
from twisted.web.resource import IResource
from twisted.internet import reactor

from zope.interface import Attribute, implements

import redfootlib
import rdflib
from rdflib import URIRef, BNode, RDF, RDFS
from rdflib.util import date_time

from urllib import unquote

from itertools import chain

from string import ascii_letters
from random import choice
import md5, time
from base64 import b64encode

from cStringIO import StringIO

KERNEL = redfoot.namespace("http://redfoot.net/hypercode/kernel#")
SERVER = redfoot.namespace("http://redfoot.net/hypercode/server#")
SESSION = redfoot.namespace("http://redfoot.net/hypercode/session#")


class Request(object):
    def __init__(self, request):
        self.__request = request
        self.__parameters = None        
        self.__session_id = None
        self.method = self.__request.method
        #self.query_string = self.__request.request_data.query
        hostname = self.getHeader("host")
        assert hostname, "hostname is required"
        hostname = hostname.lower()
        self.path = path = unquote(self.__request.path)
        self.url = URIRef("http://%s%s" % (hostname, path))
        self.host_url = URIRef("http://%s" % (hostname))

        if hostname:
            if ":" in hostname:
                name, port = hostname.split(":", 1)
                if port=="80":
                    hostname = name
        else:
            redfoot.log.warning("warning: no hostname found")
            hostname = ''
        self.uri = URIRef("http://%s%s" % (hostname, path))
        self.host = URIRef("http://%s" % (hostname))
        self.sources = [self.uri, self.host, redfoot.uri]
        
    def getCookie(self, name, default=None):
        return self.__request.received_cookies.get(name, default)

    def getHeader(self, name, default=None):
        return self.__request.received_headers.get(name, default)    

    def _getHeaders(self):
        return self.__request.received_headers
    
    headers = property(_getHeaders)

    def _getParameters(self):
        # TODO: make parameters read-only?
        if self.__parameters == None:
            self.__parameters = p =  {}
            for k, v in self.__request.args.iteritems():
                if len(v)>=0:
                    p[k] = v[0]
                else:
                    p[k] = None
        return self.__parameters

    parameters = property(_getParameters)

    def getParameterValues(self, name):
        """ Returns all the values """
        if name in self.__request.args:
            return self.__request.args[name]
        else:
            return None

    def __getUser(self):
        return self.__request.getUser()
    user = property(__getUser)
    def __getPassword(self):
        return self.__request.getPassword()
    password = property(__getPassword)

    def __getContent(self):
       return self.__request.content
    content = property(__getContent)

    def lookup(self, property, default=None, uri=None):
        uri = uri or self.uri
        sources = chain([uri], redfoot.types(uri), [self.host, redfoot.uri, KERNEL.Globals]) 
        # add self.sources as additional sources; first, let's see if
        # we can find what's depending on them and make a test case
        if (uri, RDF.type, RDFS.Class) in redfoot:
            sources.next() # ignore uri
        for source in sources: 
            p = redfoot.value(source, property)
	    if p:
		return p
	return default

    def objects(self, predicate):
        # being used in hypercode/handlers/page#put_handler
        sources = chain([self.uri], redfoot.types(self.uri), [self.host, redfoot.uri, KERNEL.Globals]) 
        if (self.uri, RDF.type, RDFS.Class) in redfoot:
            sources.next() # ignore self.uri
        for source in sources: 
            for p in redfoot.objects(source, predicate):
                yield p

    def relative(self, uri):
        if not uri.startswith(self.host):
            return "%s/;%s" % (self.host, uri)
        return uri

    def __getSessionID(self, value=None):
        session_id = self.__session_id
        if session_id is None:
            value = value or self.getCookie("redfoot", None)
            if value:
                hash = md5.new(value).hexdigest()
                session_id = URIRef("%s/session/%s#" % (self.host, hash))
                self.__session_id = session_id
        return session_id
    session_id = property(__getSessionID)

    def __random_hash(self):
        m = md5.new()
        m.update(str([choice(ascii_letters) for i in xrange(0, 8)]))
        m.update(str(time.time()))
        return m.hexdigest()

    def create_session(self):
        value = self.__random_hash()
	self.__request.cookies.append("redfoot=%s; path=/; Expires=Wed, 01 Jan 2020 00:00:00 GMT" % value)
        session_id = self.__getSessionID(value)
        context = redfoot.get_context(redfoot.context_id(session_id))
	context.add((session_id, RDF.type, SESSION.Session))
	context.add((session_id, SESSION.created, Literal(date_time())))
        return session_id

    def __getUserID(self):
        session_id = self.session_id
        if session_id:
            return redfoot.value(session_id, SESSION.uid)
        else:
            return None
    user_id = property(__getUserID)


class Response(object):
    def __init__(self, request):
        self.__request = request
        self.__body = None

    def __getCacheBody(self): 
        if self.__body is None:
            return False
        else:
            return True

    def __setCacheBody(self, value):
        if value:
            if self.__body is None:
                self.__body = StringIO()
        else:
            raise Exception("can not turn body caching back off")

    cache_body = property(__getCacheBody, __setCacheBody)

    def __getBody(self):
        body = self.__body
        if body is not None:
            return body.getvalue()
        else:
            raise Exception("cache body not set.") 
    body = property(__getBody)


    def setStatus(self, status, reason):
        self.__request.setResponseCode(status, reason)

    def write(self, data):
        if isinstance(data, unicode):
            data = data.encode("UTF-8")
        body = self.__body
        if body:
            body.write(data)
        else:
            self.__request.write(data)

    def finish(self):
        if self.__body:
            body = self.body 
            self.setHeader('content-length', str(len(body)))
            encoded_md5_digest = b64encode(md5.new(body).digest())
            self.setHeader("Content-MD5", encoded_md5_digest)
            self.setHeader("ETag", '"%s"' % encoded_md5_digest)
            self.__request.write(body)
        self.__request.finish()
    
    def setHeader(self, name, value):
        # TODO: can the value be utf-8 encoded or just ascii or ?        
        value = value.encode("utf-8")
        self.__request.setHeader(name, value)

    def addCookie(self, cookie):
        self.__request.cookies.append(cookie)


class _Resource(object):

    implements(IResource)

    isLeaf = True

    def render(self, twisted_request):
        request = Request(twisted_request)
        response = Response(twisted_request)

        handler = redfoot.value(request.uri, SERVER.handler) or redfoot.value(request.host, SERVER.handler) or redfoot.value(__uri__, SERVER.handler)
        if handler:
           # For Server header format see: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.38
            response.setHeader("Server", "Redfoot/%s rdflib/%s %s Kernel/%s Server/%s Handler/%s)" % 
                               (redfootlib.__version__, rdflib.__version__, version, redfoot.uri, __uri__, handler))
            try:
                redfoot.execute(handler, request=request, response=response)
            except Exception, e:
                _logger.exception(e)
                response.setStatus(500, "Internal Server Error -- this is hopefully a temporary issue.")
                return "%s" % e
        else:
             msg = "No handler found"
             _logger.error(msg)
             response.setStatus(500, msg)
             return msg

        # Note: it is the handler's job to call response.finish()
        # handlers can also do deferToThread (For example see handlers/page#)
        return NOT_DONE_YET


class Server(object):

    def __init__(self, hostname='', port=9090):
        self.hostname = hostname
        self.port = port
        
    def run(self):
        try:
            reactor.listenTCP(self.port, Site(_Resource()))
            try:
                reactor.run()
            except ValueError:
                reactor.run(installSignalHandlers=0)
        except KeyboardInterrupt: # TODO: 
            redfoot.log.info('shutting down...')
            reactor.shutdown()
        
]]>
    </code:python>
  </code:Code>

</rdf:RDF>  
