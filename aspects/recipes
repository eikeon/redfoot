<?xml version="1.0"?>
<rdf:RDF 
        xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
        xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
        xmlns:rdfe="http://redfoot.net/3.0/rdf#"
        xmlns:command="http://redfoot.net/3.0/command#"
        xmlns:template="http://redfoot.net/3.0/template#"
        xmlns:kid="http://redfoot.net/3.0/kid#"
        xmlns:server="http://redfoot.net/3.0/server#"
        xmlns:aspect="http://redfoot.net/3.0/aspect#"
        xmlns:code="http://redfoot.net/3.0/code#"
>

  <rdfe:RDFXMLDocument rdf:about="">
  </rdfe:RDFXMLDocument>
  
  <rdfe:Namespace rdf:about="#">
    <rdfs:label>Recipes</rdfs:label>
    <rdfs:comment>The Redfoot recipes namespace.</rdfs:comment>
  </rdfe:Namespace>

  <aspect:Aspect rdf:ID="aspect">
    <rdfs:label>Recipes</rdfs:label>
    <aspect:item rdf:resource="#recipes_page"/>
    <aspect:item rdf:resource="#recipes_atom_page"/>
    <aspect:item rdf:resource="#ingredients_page"/>
  </aspect:Aspect>

  <template:Section rdf:ID="recipes_page">
    <aspect:location>/recipes/</aspect:location>
    <rdfs:label>Recipes</rdfs:label>
    <template:section_rank>5.0</template:section_rank>    
    <server:alternate rdf:resource="/recipes/atom/" />
    <!--<server:alternate rdf:resource="/recipes/rdfxml/" />-->
    <!--<template:content rdf:resource="#recipe_xhtml_dl"/>-->
  </template:Section>

  <server:Page rdf:ID="recipes_atom_page">
    <aspect:location>/recipes/atom/</aspect:location>
    <rdfs:label>Recipes feed (atom)</rdfs:label>
    <server:page_handler rdf:resource="#recipe_atom_0.3"/>
    <!-- TODO: infer from page eventually... currently both are needed explicitly. -->
    <server:content_type>application/x.atom+xml</server:content_type>    
  </server:Page>

<!--
  <rdf:Description rdf:about="/recipes/rdfxml/">
    <server:content_type>application/rdf+xml</server:content_type>      
    <server:server rdf:parseType="Resource">
      <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[
from rdflib.URIRef import URIRef

response.setHeader("Content-Type", "application/rdf+xml")
context = redfoot.get_context(URIRef("http://donnafales.com/recipes/submitted_recipes"))
context.serialize(destination=response, format="pretty-xml")
]]>    
      </code:python>
    </server:server>
  </rdf:Description>
-->

  <template:Section rdf:ID="ingredients_page">
    <aspect:location>/ingredients/</aspect:location>
    <rdfs:label>Ingredients</rdfs:label>
    <template:section_rank>7.0</template:section_rank>    
    <template:content>
     <kid:PagePartHandler rdf:ID="ingredients_content_handler">
      <rdfs:label>Default main for Redfoot</rdfs:label>      
      <kid:template rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

<div xmlns:kid="http://purl.org/kid/ns#">
<?python
RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")
ingredients = []
for i in redfoot.subjects(RDF.type, RECIPE.Ingredient):
    label = redfoot.label(i)
    ingredients.append((label.lower(), label, i))
ingredients.sort()
?>
  <ul>
    <li kid:for="_, label, i in ingredients"><a href="${i}">${label}</a></li>
  </ul>
</div>

]]>
      </kid:template>
     </kid:PagePartHandler>
    </template:content>    
  </template:Section>


  <kid:PagePartHandler rdf:ID="recipe_xhtml_dl"> <!-- TODO: type-->
    <rdfs:label>Recipe list</rdfs:label>      
    <kid:template rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

<div xmlns="http://www.w3.org/1999/xhtml"
     xmlns:kid="http://purl.org/kid/ns#"
>
<?kid
# TODO: better way to import redfoot modules
recipes = redfoot.module(URIRef("recipe#module", base=redfoot.uri)).recipes
format = redfoot.module(URIRef("simple_format#module", base=redfoot.uri)).format
?>
  <dl>
   <span kid:omit="" 
         kid:for='recipe in recipes(uri=request.uri)'>
    <dt>
      <a href="${recipe}">${redfoot.label(recipe)}</a>
    </dt>
    <dd>
      ${XML(format(redfoot.comment(recipe)))}
    </dd>
   </span>
  </dl>
</div>

]]>

    </kid:template>
  </kid:PagePartHandler>
      
  <kid:PageHandler rdf:ID="recipe_atom_0.3">
    <rdfs:label>Recipes (Atom feed)</rdfs:label>
    <server:content_type>application/x.atom+xml</server:content_type>    
    <kid:template rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

<feed version="0.3"
      xmlns="http://purl.org/atom/ns#"
      xmlns:dc="http://purl.org/dc/elements/1.1/"
      xmlns:kid="http://purl.org/kid/ns#">
<?kid
#
from rdflib import RDF
from rdflib.URIRef import URIRef

from datetime import datetime

RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")
SERVER = redfoot.namespace("http://redfoot.net/3.0/server#")

format = redfoot.module(URIRef("simple_format#module", base=redfoot.uri)).format
recipe_module = redfoot.module(URIRef("recipe#module", base=redfoot.uri))

recipe_list = redfoot.value(None, SERVER.alternate, request.uri)
if recipe_list:
    recipe_list = recipe_list.abstract()
recipes = recipe_module.recipes(recipe_list)

now = datetime.utcnow().replace(microsecond=0).isoformat() + "Z"

?>
  <title>${redfoot.label(request.uri) or redfoot.label(recipe_list)}</title>
  <link rel="alternate" type="text/html" href="${recipe_list}"/>
  <modified>${now}</modified>
  <author>
    <name>${redfoot.label(request.host)}</name>
  </author>
  <dc:subject>recipes</dc:subject>
 <span kid:for="recipe in recipes" kid:omit="">
  <entry>
    <title>${redfoot.label(recipe)}</title>
    <link rel="alternate" type="text/html" href="${recipe}"/>
    <id>${recipe}</id>
    <issued>${redfoot.value(recipe, RECIPE.date)}</issued>
    <modified>${redfoot.value(recipe, RECIPE.modified) or now}</modified>    
    <content type="text/html" mode="escaped">
      ${format(redfoot.comment(recipe))}
    </content>
    <dc:subject>recipe</dc:subject>
  </entry>
 </span>
</feed>                      

]]>
    </kid:template>
  </kid:PageHandler>

  <command:Command rdf:ID="submit_recipe">
    <rdfs:label>submit_recipe</rdfs:label>
    <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")

email = redfoot.module(URIRef("email#module", base=redfoot.uri))
message = email.parse()

if "@eikeon.com" in message.email_address:
    recipes = URIRef("http://eikeon.com/recipes/")
else:
    recipes = URIRef("http://donnafales.com/recipes/")    

recipe_uri = URIRef("%s%s/" % (recipes, message.subject))

context = redfoot.get_context(redfoot.context_id(recipe_uri.abstract()))

context.add((recipe_uri, RDF.type, recipes.abstract()))

recipe_module = redfoot.module(URIRef("recipe#module", base=redfoot.uri))
recipe_module.parse(message.payload, context, recipe_uri)

]]>
    </code:python>
  </command:Command>

  <command:Command rdf:ID="ingredients">
    <rdfs:label>ingredients</rdfs:label>
    <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")

for i in redfoot.subjects(RDF.type, RECIPE.Ingredient):
    print redfoot.label(i).encode("ascii", "replace")

]]>
    </code:python>
  </command:Command>

  <command:Command rdf:ID="update_recipes">
    <rdfs:label>update recipes</rdfs:label>      
    <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")

recipe = redfoot.module(URIRef("recipe#module", base=redfoot.uri))

l = []
for r in redfoot.subjects(RDF.type, RECIPE.Recipe):
    print "updating:", r    
    date = redfoot.value(r, RECIPE.date, any=True)
    orig = redfoot.value(r, RECIPE.original, any=True)
    l.append((r, date, orig))

for r, date, orig in l:
    context = redfoot.get_context(redfoot.context_id(r.abstract()))
    context.add((r, RECIPE.date, date))
    recipe.parse(orig, context, r)


f = file("unknown_ingredients", "wb")
parser = recipe.ingredient_parser
if parser.unknown_tokens:
    for unknown in parser.unknown_tokens:
        f.write("%s\n" % unknown.encode("utf-8"))
f.close()

# NOTE: tmp. converts (recipes, RECIPE.recipe, recipe) -> (recipe, RDF.type, recipes)
for recipes, _, r in redfoot.triples((None, RECIPE.recipe, None)):
    context = redfoot.get_context(redfoot.context_id(r.abstract()))
    context.add((r, RDF.type, recipes.abstract()))
    print "converting to type for %s" % r

]]>
    </code:python>
  </command:Command>

  <command:Command rdf:ID="print_recipe_rdf">
    <rdfs:label>print recipe rdf</rdfs:label>      
    <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")


from rdflib.TripleStore import TripleStore
context = TripleStore()

recipe_module = redfoot.module(URIRef("recipe#module", base=redfoot.uri))
for arg in args:
    recipe = URIRef(arg)
    orig = redfoot.value(recipe, RECIPE.original)
    if orig:
        recipe_module.parse(orig, context)
        print context.serialize()
    else:
        print "No %s found for %s" % (RECIPE.original, recipe)

]]>
      </code:python>
    </command:Command>

    <command:command rdf:ID="parse_ingred">
      <rdfs:label>parse_ingred</rdfs:label>
      <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")

IngredientParser = redfoot.module("http://eikco.com/2005/03/ingredient_parser#module").IngredientParser

parser = IngredientParser()

if args:
    for arg in args:
        print parser.parse(arg)
else:
    for i in redfoot.subjects(RDF.type, RECIPE.IngredientListItem):
        parser.parse(redfoot.label(i))

import sys
if parser.unknown_tokens:
    print "unknown tags:"
    for unknown in parser.unknown_tokens:
        s = u"%s\n" % unknown
        try:
            sys.stdout.write(s.encode("ascii", "replace"))
        except Exception, e:
            print e                             

]]>
      </code:python>
    </command:command>

    <command:command rdf:ID="remove_recipe">
      <rdfs:label>remove_recipe</rdfs:label>
      <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

def remove(r):
    for s, p, o in redfoot.triples((r, None, None)):
        redfoot.remove((s, p, o))
        if isinstance(o, BNode):
            remove(o)

for arg in args:
    uri = URIRef(arg)
    remove(uri)
    redfoot.remove((None, None, uri))

]]>
      </code:python>
    </command:command>

    <command:Command rdf:ID="recipes_missing">
      <rdfs:label>recipes_missing</rdfs:label>
      <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[

RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")

for recipe in redfoot.subjects(RDF.type, RECIPE.Recipe):
    if not (recipe, RECIPE.original, None) in redfoot:
        print recipe

]]>
      </code:python>
    </command:Command>


  <rdf:Description rdf:about="http://donnafales.com/2002/07/28/recipe-schema#Recipe">
<!--
    <handler:text rdf:parseType="Resource">
      <rdfs:label>KID template for displaying a Recipe</rdfs:label>
      <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[
response.write("""
%s

%s
""" % (redfoot.label(request.uri), redfoot.comment(request.uri)))
]]>
      </code:python>
    </handler:text>
-->
    <template:content>
     <kid:PagePartHandler rdf:ID="RecipeContent">
      <rdfs:label>Recipe</rdfs:label>
      <kid:template rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[
<div xmlns="http://www.w3.org/1999/xhtml"
     xmlns:kid="http://purl.org/kid/ns#"
     class="recipe"
>
<?kid
# import some stuff
# TODO: push to redfoot using datatype plugin
format = redfoot.module(URIRef("simple_format#module", base=redfoot.uri)).format

RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")

recipe = request.uri
?>

  <p>${XML(format(redfoot.comment(recipe)))}</p>

 <div class="ingredients"
      kid:for="ingredients in redfoot.objects(recipe, RECIPE.ingredients)">
  <h3>${' | '.join(redfoot.objects(ingredients, RDFS.label)) + ' Ingredients'}</h3>
  <ul>
    <li kid:for="ingredient in redfoot.items(ingredients)">    
        ${XML(format(redfoot.label(ingredient)))}
    </li>    
  </ul>
 </div>

 <div class="directions"
       kid:for="steps in redfoot.objects(recipe, RECIPE.directions)">
  <h3>Directions</h3>
  <ol>
    <li kid:for="item in redfoot.items(steps)">
        ${XML(format(redfoot.label(item)))}
    </li>    
  </ol>
 </div>
 <div class="spacer"/>&#160;
</div>
]]>
      </kid:template>
     </kid:PagePartHandler>
    </template:content>
  </rdf:Description>
<!--
<hr/>
<?python
from random import choice
RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")    
recipe = choice(list(redfoot.subjects(RDF.type, RECIPE.Recipe)))
source = redfoot.value(None, RECIPE.recipe, recipe, any=True)
?>
    <p>Random Recipe: <a href="${recipe}">${redfoot.label(recipe)}</a></p>
-->

  <rdf:Description rdf:about="http://donnafales.com/2002/07/28/recipe-schema#Ingredient">
    <template:content>
     <kid:PagePartHandler rdf:ID="IngredientContent">
      <rdfs:label>Ingredient</rdfs:label>
      <kid:template rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[
<div xmlns="http://www.w3.org/1999/xhtml"
     xmlns:kid="http://purl.org/kid/ns#"
     class="ingredient"
>
<?kid
RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")
format = redfoot.module(URIRef("simple_format#module", base=redfoot.uri)).format

ingredient = request.uri

recipes = []
for recipe in redfoot.subjects(RECIPE.ingredient, ingredient):
    label = redfoot.label(recipe)
    recipes.append((label, recipe))
recipes.sort()

?>

  <p>${XML(format(redfoot.comment(ingredient)))}</p>

  <h3>Recipes containing ${redfoot.label(ingredient)}</h3>
  <ul>
    <li kid:for="label, recipe in recipes">
      <a href="${request.relative(recipe.concrete())}">${label}</a>        
    </li>    
  </ul>

</div>
]]>
      </kid:template>
     </kid:PagePartHandler>
    </template:content>
  </rdf:Description>    

  <rdf:Description rdf:about="http://donnafales.com/2002/07/28/recipe-schema#RecipeOriginal">
    <rdfs:label>Recipe Original</rdfs:label>
    <rdfs:comment>Alternative view of recipe, namely, the original</rdfs:comment>
    <server:supported_content_types>text/plain</server:supported_content_types>
    <server:page_handler>
     <server:PageHandler rdf:ID="RecipeOriginalContent">
      <rdfs:label>Recipe Original</rdfs:label>
      <server:content_type>text/plain</server:content_type>            
      <code:python rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
<![CDATA[
RECIPE = redfoot.namespace("http://donnafales.com/2002/07/28/recipe-schema#")
SERVER = redfoot.namespace("http://redfoot.net/3.0/server#")
recipe = redfoot.value(None, SERVER.alternate, request.uri)
response.write(redfoot.value(recipe, RECIPE.original))
]]>
      </code:python>
     </server:PageHandler>
    </server:page_handler>
  </rdf:Description>

</rdf:RDF>  
